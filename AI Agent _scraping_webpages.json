{
  "name": "AI Agent _scraping_webpages",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -224,
        -80
      ],
      "id": "008219ee-ae98-4024-9a28-27cda442974f",
      "name": "When chat message received",
      "webhookId": "ecb92982-caf6-48a0-8c78-8e15b20514e7"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        80,
        -80
      ],
      "id": "06d78e68-50fb-485e-af0e-b63ad4972d87",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        80,
        128
      ],
      "id": "862017e2-69a1-4dc8-8da7-cece5ba64d3e",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "dReBCNd5nWALMsNp",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -560,
        336
      ],
      "id": "dfa8c420-9386-4b1e-8cd8-11c9b1a87e9c",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0d3cbf6b-d2a8-44fe-bba5-979f2c303289",
              "name": "query",
              "value": "={{ $json.query.substring($json.query.indexOf('?') + 1).split('&').reduce((result, item) => (result[item.split('=')[0]] = decodeURIComponent(item.split('=')[1]), result), {}) }}",
              "type": "object"
            }
          ]
        },
        "includeOtherFields": "={{ false }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -256,
        336
      ],
      "id": "3eced026-e98b-434a-84f1-cf4bf106caf9",
      "name": "Query_PARAMS"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0d3cbf6b-d2a8-44fe-bba5-979f2c303289",
              "name": "query.maxlimit",
              "value": "={{ $json?.query?.maxlimit == null ? 70000 : Number($json?.query?.maxlimit) }}",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": "={{ false }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        48,
        336
      ],
      "id": "14abc80f-d0ad-48ad-80cc-603fc3c1a03a",
      "name": "CONFIG"
    },
    {
      "parameters": {
        "url": "https://www.seneweb.com/fr/",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        352,
        336
      ],
      "id": "7b80751d-ba2f-4b9b-baef-32891e64c407",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d9cae2fc-c657-498c-8200-67b0b8d2a3bc",
              "leftValue": "={{ $json.hasOwnProperty('error') }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        608,
        352
      ],
      "id": "a98ebee5-9478-42bc-9c8a-e5a430398265",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ece64e71-6ab4-45ee-ad96-3976001d6e94",
              "name": "=page_content",
              "value": "={{ $('QUERY_PARAMS').first()?.json?.query?.url == null ? \"INVALID action_input. This should be an HTTP query string like this: \\\"?url=VALIDURL&method=SELECTEDMETHOD\\\". Only a simple string value is accepted. JSON object as an action_input is NOT supported!\" : JSON.stringify($json.error) }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "selected",
        "includeFields": "=HTML",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        864,
        352
      ],
      "id": "f0b0b511-fc15-4af4-8a03-2a8aa9a3b28a",
      "name": "Stringify error message"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "97ccbeb0-d708-402b-bd32-1d10d2e78455",
              "name": "HTML",
              "value": "={{ $json?.data.match(/<body[^>]*>([\\s\\S]*?)<\\/body>/i)[1] }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "selected",
        "includeFields": "HTML",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        624,
        720
      ],
      "id": "d1f1821f-bf63-49e3-8ea9-6fe10857362d",
      "name": "Extract HTML Body"
    },
    {
      "parameters": {
        "description": "Call this tool to fetch a webpage content. The input should be a stringified HTTP query parameter like this: \"?url=VALIDURL&method=SELECTEDMETHOD\". \"url\" parameter should contain the valid URL string. \"method\" key can be either \"full\" or \"simplified\". method=full will fetch the whole webpage content in the Markdown format, including page links and image links. method=simplified will return the Markdown content of the page but remove urls and image links from the page content for simplicity. Before calling this tool, think strategically which \"method\" to call. Best of all to use method=simplified. However, if you anticipate that the page request is not final or if you need to extract links from the page, pick method=full.",
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id",
          "cachedResultUrl": "/workflow/=%7B%7B%20$workflow.id%20%7D%7D"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        224,
        128
      ],
      "id": "0cfa7019-25ec-4db2-bf50-81968d1956b8",
      "name": "Call n8n Workflow Tool",
      "notesInFlow": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "599d4f44-ebf9-4aad-b234-17954ae0dd1e",
              "leftValue": "={{ $('CONFIG').first()?.json?.query?.method }}",
              "rightValue": "simplify",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1120,
        720
      ],
      "id": "8b4286e9-0eea-421f-8d9f-6bd2dfd1dac6",
      "name": "If1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6ae9b7bf-9b0d-41e3-93a5-2e108039feee",
              "name": "=HTML",
              "value": "={{ $json.HTML.replace(/href\\s*=\\s*\"(.+?)\"/gi, 'href=\"NOURL\"').replace(/src\\s*=\\s*\"(.+?)\"/gi, 'src=\"NOIMG\"')}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1328,
        576
      ],
      "id": "2b04c118-bdba-4c86-9fa7-1e4c525a8c11",
      "name": "Simplify output"
    },
    {
      "parameters": {
        "html": "={{ $json.HTML }}",
        "destinationKey": "page_content",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        1520,
        736
      ],
      "id": "a4bdd27e-2cde-452b-b423-64d54522a987",
      "name": "Convert to Markdown"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2c6b34b6-720d-49e2-aa23-acdd72b53f6e",
              "name": "page_content",
              "value": "={{ $json.page_content.length < $('CONFIG').first()?.json?.query?.maxlimit ? $json.page_content : \"ERROR: PAGE CONTENT TOO LONG\" }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1808,
        736
      ],
      "id": "f1751e41-3050-4ad7-8b2c-42c8b3932c63",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1ebc7b33-782f-4841-9505-6165c66ea434",
              "name": "=HTML",
              "value": "={{ ($json.HTML || \"HTML BODY CONTENT FOR THIS SEARCH RESULT IS NOT AVAILABLE\").replace(/<script[^>]*>([\\s\\S]*?)<\\/script>|<style[^>]*>([\\s\\S]*?)<\\/style>|<noscript[^>]*>([\\s\\S]*?)<\\/noscript>|<!--[\\s\\S]*?-->|<iframe[^>]*>([\\s\\S]*?)<\\/iframe>|<object[^>]*>([\\s\\S]*?)<\\/object>|<embed[^>]*>([\\s\\S]*?)<\\/embed>|<video[^>]*>([\\s\\S]*?)<\\/video>|<audio[^>]*>([\\s\\S]*?)<\\/audio>|<svg[^>]*>([\\s\\S]*?)<\\/svg>/ig, '')}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        864,
        720
      ],
      "id": "b46ca675-a263-4dba-8eb5-905ca96ffb86",
      "name": "Remove_Extra_tags"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Query_PARAMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query_PARAMS": {
      "main": [
        [
          {
            "node": "CONFIG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CONFIG": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Stringify error message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract HTML Body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call n8n Workflow Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Extract HTML Body": {
      "main": [
        [
          {
            "node": "Remove_Extra_tags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Simplify output",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simplify output": {
      "main": [
        [
          {
            "node": "Convert to Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to Markdown": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove_Extra_tags": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "30b272ec-4ee2-4303-bf6c-779914f66a06",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a6f1ec5bddb29737607d2d2671c53399cd8a12466b2090b7c8e527b190447746"
  },
  "id": "ejRuh9OkLN61EdMP",
  "tags": []
}